{"version":3,"sources":["app.js","admin.js","guest.js","registred.js","main.js","loginFactory.js","content.js","footer.js","login.js","navbar.js"],"names":[],"mappingsvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"subalcatel.js","sourcesContent":["var subalcatelApp = angular\n    .module('subalcatelApp',\n        [\n            'ngAnimate',\n            'ui.router',\n            'mgcrea.ngStrap',\n            'satellizer'\n        ]\n    )\n    .constant('api_url', '/api')\n    .constant('auth_url', '/auth')\n    .constant('guest_url', '/guest')\n    .constant('registred_url', '/registred')\n    .constant('admin_url', '/admin')\n    /*.config(function ($stateProvider, $urlRouterProvider, $authProvider) {\n        // Satellizer configuration that specifies which API\n        // route the JWT should be retrieved from\n        $authProvider.loginUrl = '/api/authenticate';\n\n    })*/;\n\n\n/*\nsubalcatelApp.config(function Config($httpProvider, jwtInterceptorProvider) {\n    jwtInterceptorProvider.tokenGetter = [\n        'config',\n        'jwtHelper',\n        '$alert',\n        '$http',\n        function(config, jwtHelper, $alert, $http) {\n            var token = localStorage.getItem('id_token');\n            var refreshToken = localStorage.getItem('refresh_token');\n            // Skip authentication for any requests ending in .html\n            //console.log(config.url);\n            if ((config.url.substr(config.url.length - 5) == '.html') || config.url.match(/signin/g)) {\n                console.log('Macth \"html\" || \"signin\"');\n                return null;\n            }\n\n            if (!token || token == \"undefined\") {\n                var token_error = $alert({\n                    title: 'Token Error',\n                    content: 'You are not log in',\n                    type: 'danger',\n                    placement: 'top',\n                    show: 'true',\n                    container: 'body'\n                });\n            }\n            else if (jwtHelper.isTokenExpired(token)) {\n                // This is a promise of a JWT id_token\n                return $http({\n                    url: '/delegation',\n                    // This makes it so that this request doesn't send the JWT\n                    skipAuthorization: true,\n                    method: 'POST',\n                    data: {\n                        grant_type: 'refresh_token',\n                        refresh_token: refreshToken\n                    }\n                }).then(function(response) {\n                    var token = response.data.token;\n                    localStorage.setItem('id_token', token);\n                    return token;\n                });\n            }\n            else {\n                return token;\n            }\n\n            //return token;\n        }\n    ];\n\n    $httpProvider.interceptors.push('jwtInterceptor');\n});*/\n","","subalcatelApp.config([\n    '$stateProvider',\n    '$urlRouterProvider',\n    '$authProvider',\n    '$httpProvider',\n    '$provide',\n    function($stateProvider, $urlRouterProvider, $authProvider, $httpProvider, $provide) {\n\n        function redirectWhenLoggedOut($q, $injector) {\n            return {\n                responseError: function(rejection) {\n                    // Need to use $injector.get to bring in $state or else we get\n                    // a circular dependency error\n                    var $state = $injector.get('$state');\n                    // Instead of checking for a status code of 400 which might be used\n                    // for other reasons in Laravel, we check for the specific rejection\n                    // reasons to tell us if we need to redirect to the login state\n                    var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid'];\n                    // Loop through each rejection reason and redirect to the login\n                    // state if one is encountered\n                    angular.forEach(rejectionReasons, function(value, key) {\n                        if(rejection.data.error === value) {\n\n                            // If we get a rejection corresponding to one of the reasons\n                            // in our array, we know we need to authenticate the user so\n                            // we can remove the current user from local storage\n                            localStorage.removeItem('user');\n                            // Send the user to the auth state so they can login\n                            $state.go('home');\n                        }\n                    });\n                    return $q.reject(rejection);\n                }\n            }\n        }\n\n        // Setup for the $httpInterceptor\n        $provide.factory('redirectWhenLoggedOut', redirectWhenLoggedOut);\n\n        // Push the new factory onto the $http interceptor array\n        $httpProvider.interceptors.push('redirectWhenLoggedOut');\n\n        // Satellizer configuration that specifies which API\n        // route the JWT should be retrieved from\n        $authProvider.loginUrl = '/api/auth/signin';\n        // Guest routes\n        $stateProvider\n            .state('home',\n                {\n                    url: '/',\n                    templateUrl: 'templates/guest/index.html'\n                }\n            )\n            .state('informations',\n                {\n                    url: '/informations',\n                    abstract: true,\n                    template: '<ui-view/>'\n                }\n            )\n            .state('informations.contact',\n                {\n                    url: '/contact',\n                    templateUrl: 'templates/guest/informations/contact.html'\n                }\n            )\n            .state('informations.a-propos',\n                {\n                    url: '/a-propos',\n                    templateUrl: 'templates/guest/informations/apropos.html'\n                }\n            )\n        ;\n        // Default route\n        $urlRouterProvider.otherwise('/');\n    }\n]);","","subalcatelApp.controller('main', ['$scope', function($scope){\n}]);","subalcatelApp.factory('loginFactory', [\n    '$auth',\n    'api_url',\n    'auth_url',\n    '$http',\n    function ($auth, api_url, auth_url, $http) {\n        var loginFact = {\n            isAuth: false,\n            name: null,\n            firstname: null\n        };\n\n        loginFact.signin = function (credentials) {\n            return $auth.login(credentials);\n        };\n\n        loginFact.ping = function() {\n            return $http.get(api_url + auth_url + '/ping');\n        };\n\n        loginFact.logout = function () {\n            return $auth.logout();\n        };\n\n        return loginFact;\n    }\n]);","subalcatelApp.directive('content', [function(){\n    return {\n        restrict: 'A',\n        templateUrl: 'templates/layout/content.html',\n        replace: true,\n        transclude: true\n    };\n}]);","subalcatelApp.directive('footer', [ function(){\n    return {\n        restrict: 'A',\n        templateUrl: 'templates/layout/footer.html',\n        replace: true,\n        transclude: true\n    };\n}]);","subalcatelApp.directive('authenticate', [\n    'loginFactory',\n    '$alert',\n    function(loginFactory, $alert) {\n        return {\n            restrict: 'AE',\n            templateUrl: 'templates/directives/login.html',\n            replace: true,\n            transclude: true,\n            link: function (scope, iElm, iAttrs, controller) {\n                // login\n                scope.signin = function () {\n                    loginFactory.signin(scope.credentials).then(\n                        function() {\n                            loginFactory.ping().then(\n                                function(response) {\n                                    loginFactory.name = response.data.user.name;\n                                    loginFactory.firstname = response.data.user.firstname;\n                                    loginFactory.isAuth = true;\n\n                                    var user = JSON.stringify(response.data.user);\n\n                                    // Set the stringified user data into local storage\n                                    localStorage.setItem('user', user);\n                                },\n                                function(error) {\n                                    console.log(error);\n                                }\n                            );\n                        },\n                        function(error){\n                            $alert({\n                                title: 'Error',\n                                content: error.data.error  || 'Erreur',\n                                type: 'danger',\n                                placement: 'top',\n                                show: 'true',\n                                container: 'body'\n                            });\n                        }\n                    );\n                };\n\n                // logout\n                scope.logout = function () {\n                    loginFactory.logout().then(\n                        function () {\n                            loginFactory.isAuth = false;\n                            localStorage.removeItem('user');\n                        },\n                        function (error) {\n                            console.log(error);\n                        }\n                    )\n                };\n\n                // check isAuth value\n                scope.check = function () {\n                    return loginFactory.isAuth;\n                };\n\n                scope.dropdown = [\n                    {\n                        \"divider\": true\n                    },\n                    {\n                        \"text\": \"Deconnection\",\n                        \"click\": \"logout()\"\n                    }\n                ];\n\n                // return user name from factory\n                scope.getLoggedUserName = function() {\n                    return loginFactory.name;\n                };\n\n                //return user firstname from factory\n                scope.getLoggedUserFirstname = function() {\n                    return loginFactory.firstname;\n                };\n\n                // Check auth status\n                var init = function () {\n                    loginFactory.ping().then(\n                        function(response) {\n                            loginFactory.name = response.data.user.name;\n                            loginFactory.firstname = response.data.user.firstname;\n                            loginFactory.isAuth = true;\n\n                            var user = JSON.stringify(response.data.user);\n\n                            // Set the stringified user data into local storage\n                            localStorage.setItem('user', user);\n                        },\n                        function(error) {\n                            console.log(error);\n                        }\n                    );\n                }\n                init();\n            }\n        }\n    }\n]);","subalcatelApp.directive('navbar', [ function(){\n    return {\n        restrict: 'A',\n        templateUrl: 'templates/layout/navbar.html',\n        replace: true,\n        transclude: true,\n        controller: [\n            '$scope',\n            '$location',\n            function($scope, $location) {\n                $scope.navigation = {\n                    title: 'Navigation',\n                    content: 'Test'\n                };\n                $scope.menu = {\n                    title: 'Menu',\n                    content: 'Test'\n                };\n\n                $scope.navbar_menu = \"templates/layout/navbar-menu.html\";\n                $scope.offcanvas_menu = \"templates/layout/offcanvas-menu.html\";\n        }]\n    };\n}]);"],"sourceRoot":"/source/"}